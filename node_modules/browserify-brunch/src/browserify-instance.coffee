watchify = require 'watchify'
mkdirp = require 'mkdirp'
path = require 'path'
{openSync, writeSync, closeSync} = require 'fs'
uglify = require 'uglify-js'

class BrowserifyInstance
  constructor: (@data) ->
    __b = if @data.main.watching then watchify else watchify.browserify

    @__w = __b "./#{@data.entry}", @data.instanceOptions

    for transform in @data.transforms
      @__w.transform(transform)

    @data.onBrowserifyLoad?.apply this, [@__w]

    if __b is watchify
      @__w.on 'update', @handleUpdate
      @handleUpdate()

    null

  handleUpdate: (fileContents, filePath, callback) =>
    @running = true
    @data.onBeforeBundle?.apply this, [@__w]

    @data.bundleOptions.debug ?= !@data.main.production
    @__w.bundle @data.bundleOptions, (error, js) =>
      if error or not js?
        if not @data.main.watching
          throw error

        console.error 'Browserify Error', error
        callback? error || true, fileContents, filePath
        return

      # Since the files run through browserify are not defined in
      # `brunchConfig.files.javascripts`, they are not picked up by the
      # installed optimizers.
      if @data.main.production
        minified = uglify.minify js, fromString: true
        js = minified.code

      # Likewise, we don't get folders generated by Brunch.
      outputFile = "#{@data.main.publicPath}/#{@data.compiledPath}"
      mkdirp.sync path.dirname(outputFile)
      fd = openSync outputFile, 'w+'
      writeSync fd, js
      closeSync fd

      @running = false
      @data.onAfterBundle?.apply this, arguments
      @data.main.__autoReloadServer?.sendMessage 'page'
      callback? error, fileContents, filePath

module.exports = {
  BrowserifyInstance
}
