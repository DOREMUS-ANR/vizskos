// Generated by CoffeeScript 1.9.3
var AutoReloadServer, BrowserifyBrunch, BrowserifyInstance, DEFAULTS, anymatch, clone, path,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

anymatch = require('anymatch');

BrowserifyInstance = require('./browserify-instance').BrowserifyInstance;

clone = require('./util').clone;

AutoReloadServer = require('./auto-reload-server').AutoReloadServer;

path = require('path');

DEFAULTS = {
  extensions: "js json\ncoffee ts jsx\nhbs jade",
  transforms: [],
  bundles: {
    'app.js': {
      entry: 'app/init.js',
      matcher: /^app/,
      onBrowserifyLoad: void 0,
      onBeforeBundle: void 0,
      onAfterBundle: void 0,
      instanceOptions: void 0,
      bundleOptions: void 0
    }
  }
};

module.exports = BrowserifyBrunch = (function() {
  BrowserifyBrunch.prototype.brunchPlugin = true;

  BrowserifyBrunch.prototype.type = 'javascript';

  BrowserifyBrunch.prototype.extension = 'coffee';

  BrowserifyBrunch.prototype.throttle = 250;

  function BrowserifyBrunch(brunchConfig) {
    this.brunchConfig = brunchConfig;
    this.production = indexOf.call(this.brunchConfig.env, 'production') >= 0;
    this.publicPath = this.brunchConfig.paths["public"];
    this.watching = indexOf.call(process.argv, 'watch') >= 0;
    this.__initConfig();
    this.__initExtensions();
    this.__initInstances();
    this.__initAutoReload();
  }

  BrowserifyBrunch.prototype.__initConfig = function() {
    var base, k, ref, v;
    this.config = clone(((ref = this.brunchConfig.plugins) != null ? ref.browserify : void 0) || {});
    for (k in DEFAULTS) {
      v = DEFAULTS[k];
      if ((base = this.config)[k] == null) {
        base[k] = v;
      }
    }
    return null;
  };

  BrowserifyBrunch.prototype.__initExtensions = function() {
    this.extensionList = this.config.extensions.trim().split(/\s+/);
    return this.pattern = RegExp("\\.(" + (this.extensionList.join('|')) + ")$");
  };

  BrowserifyBrunch.prototype.__initInstances = function() {
    var base, compiledPath, data, ext, instance, ref;
    this.__instances = {};
    ref = this.config.bundles;
    for (compiledPath in ref) {
      data = ref[compiledPath];
      if (data.instanceOptions == null) {
        data.instanceOptions = {};
      }
      if (data.bundleOptions == null) {
        data.bundleOptions = {};
      }
      data.main = this;
      if ((base = data.instanceOptions).extensions == null) {
        base.extensions = (function() {
          var i, len, ref1, results;
          ref1 = this.extensionList;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            ext = ref1[i];
            results.push("." + ext);
          }
          return results;
        }).call(this);
      }
      data.compiledPath = compiledPath;
      data.transforms = this.config.transforms;
      instance = new BrowserifyInstance(data);
      instance.matcher = anymatch.matcher(data.matcher);
      this.__instances[compiledPath] = instance;
    }
    return null;
  };

  BrowserifyBrunch.prototype.__initAutoReload = function() {
    if (!this.watching) {
      return;
    }
    return this.__autoReloadServer = new AutoReloadServer(this.config);
  };

  BrowserifyBrunch.prototype.include = function() {
    if (this.__autoReloadServer == null) {
      return [];
    }
    return [path.join(__dirname, '..', 'vendor', 'auto-reload-browserify.js')];
  };

  BrowserifyBrunch.prototype.compile = function(fileContents, filePath, callback) {
    var __triggered, compiledPath, instance, ref;
    if ((this.__autoReloadServer != null) && path.basename(filePath) === 'auto-reload-browserify.js') {
      return callback(null, fileContents.replace(9812, this.__autoReloadServer.port), filePath);
    }
    if (this.watching) {
      return callback(null, fileContents, filePath);
    }
    __triggered = false;
    ref = this.__instances;
    for (compiledPath in ref) {
      instance = ref[compiledPath];
      if (!instance.matcher(filePath)) {
        continue;
      }
      if (instance.running) {
        continue;
      }
      __triggered = true;
      instance.handleUpdate.apply(instance, arguments);
    }
    if (!__triggered) {
      callback(null, fileContents, filePath);
    }
    return null;
  };

  BrowserifyBrunch.prototype.teardown = function() {
    var ref;
    return (ref = this.__autoReloadServer) != null ? ref.teardown() : void 0;
  };

  return BrowserifyBrunch;

})();
