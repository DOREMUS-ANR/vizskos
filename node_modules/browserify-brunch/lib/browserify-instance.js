// Generated by CoffeeScript 1.9.3
var BrowserifyInstance, closeSync, mkdirp, openSync, path, ref, uglify, watchify, writeSync,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

watchify = require('watchify');

mkdirp = require('mkdirp');

path = require('path');

ref = require('fs'), openSync = ref.openSync, writeSync = ref.writeSync, closeSync = ref.closeSync;

uglify = require('uglify-js');

BrowserifyInstance = (function() {
  function BrowserifyInstance(data) {
    var __b, i, len, ref1, ref2, transform;
    this.data = data;
    this.handleUpdate = bind(this.handleUpdate, this);
    __b = this.data.main.watching ? watchify : watchify.browserify;
    this.__w = __b("./" + this.data.entry, this.data.instanceOptions);
    ref1 = this.data.transforms;
    for (i = 0, len = ref1.length; i < len; i++) {
      transform = ref1[i];
      this.__w.transform(transform);
    }
    if ((ref2 = this.data.onBrowserifyLoad) != null) {
      ref2.apply(this, [this.__w]);
    }
    if (__b === watchify) {
      this.__w.on('update', this.handleUpdate);
      this.handleUpdate();
    }
    null;
  }

  BrowserifyInstance.prototype.handleUpdate = function(fileContents, filePath, callback) {
    var base, ref1;
    this.running = true;
    if ((ref1 = this.data.onBeforeBundle) != null) {
      ref1.apply(this, [this.__w]);
    }
    if ((base = this.data.bundleOptions).debug == null) {
      base.debug = !this.data.main.production;
    }
    return this.__w.bundle(this.data.bundleOptions, (function(_this) {
      return function(error, js) {
        var fd, minified, outputFile, ref2, ref3;
        if (error || (js == null)) {
          if (!_this.data.main.watching) {
            throw error;
          }
          console.error('Browserify Error', error);
          if (typeof callback === "function") {
            callback(error || true, fileContents, filePath);
          }
          return;
        }
        if (_this.data.main.production) {
          minified = uglify.minify(js, {
            fromString: true
          });
          js = minified.code;
        }
        outputFile = _this.data.main.publicPath + "/" + _this.data.compiledPath;
        mkdirp.sync(path.dirname(outputFile));
        fd = openSync(outputFile, 'w+');
        writeSync(fd, js);
        closeSync(fd);
        _this.running = false;
        if ((ref2 = _this.data.onAfterBundle) != null) {
          ref2.apply(_this, arguments);
        }
        if ((ref3 = _this.data.main.__autoReloadServer) != null) {
          ref3.sendMessage('page');
        }
        return typeof callback === "function" ? callback(error, fileContents, filePath) : void 0;
      };
    })(this));
  };

  return BrowserifyInstance;

})();

module.exports = {
  BrowserifyInstance: BrowserifyInstance
};
